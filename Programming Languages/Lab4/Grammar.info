-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.10 from Grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseHaskellito -> AST                      (0)
	AST -> True                                        (1)
	AST -> False                                       (2)
	AST -> int                                         (3)
	AST -> let var '=' AST in AST                      (4)
	AST -> if AST then AST else AST                    (5)
	AST -> '(' '\\' var '->' AST ')' '::' Type '->' Type   (6)
	AST -> AST AST                                     (7)
	AST -> AST '==' AST                                (8)
	AST -> AST '&&' AST                                (9)
	AST -> AST '||' AST                                (10)
	AST -> not AST                                     (11)
	AST -> AST '+' AST                                 (12)
	AST -> AST '-' AST                                 (13)
	AST -> AST '*' AST                                 (14)
	AST -> AST quot AST                                (15)
	AST -> AST rem AST                                 (16)
	AST -> '-' int                                     (17)
	AST -> AST '<=' AST                                (18)
	AST -> AST '>=' AST                                (19)
	AST -> AST '\=' AST                                (20)
	AST -> AST '<' AST                                 (21)
	AST -> AST '>' AST                                 (22)
	AST -> '(' AST ')'                                 (23)
	AST -> var                                         (24)
	Type -> Type '->' Type                             (25)
	Type -> '(' Type ')'                               (26)
	Type -> Bool                                       (27)
	Type -> Int                                        (28)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	True           { BOOLVAL True }
	False          { BOOLVAL False }
	int            { INTVAL $$ }
	let            { LET }
	if             { IF }
	then           { THEN }
	else           { ELSE }
	'='            { BIND }
	in             { IN }
	'\\'           { LAMBDA }
	'->'           { ARROW }
	'::'           { COLONS }
	'=='           { EQUALS }
	'&&'           { AND }
	'||'           { OR }
	not            { NOT }
	'+'            { PLUS }
	'-'            { MINUS }
	'*'            { TIMES }
	quot           { QUOT }
	rem            { REM }
	'<='           { LTEQ }
	'>='           { GTEQ }
	'\='           { NOTEQ }
	'<'            { Lexer.LT }
	'>'            { Lexer.GT }
	Bool           { BOOL }
	Int            { INT }
	'('            { LPAREN }
	')'            { RPAREN }
	var            { VAR $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseHaskellito rule  0
	AST             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
	Type            rules 25, 26, 27, 28

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 3

State 1


	True           shift, and enter state 2


State 2

	AST -> True .                                       (rule 1)

	True           reduce using rule 1
	False          reduce using rule 1
	int            reduce using rule 1
	let            reduce using rule 1
	if             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	in             reduce using rule 1
	'=='           reduce using rule 1
	'&&'           reduce using rule 1
	'||'           reduce using rule 1
	not            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	quot           reduce using rule 1
	rem            reduce using rule 1
	'<='           reduce using rule 1
	'>='           reduce using rule 1
	'\='           reduce using rule 1
	'<'            reduce using rule 1
	'>'            reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	var            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parseHaskellito -> AST .                     (rule 0)
	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	'=='           shift, and enter state 19
	'&&'           shift, and enter state 20
	'||'           shift, and enter state 21
	not            shift, and enter state 8
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	var            shift, and enter state 11
	%eof           accept

	AST            goto state 18

State 4

	AST -> False .                                      (rule 2)

	True           reduce using rule 2
	False          reduce using rule 2
	int            reduce using rule 2
	let            reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	in             reduce using rule 2
	'=='           reduce using rule 2
	'&&'           reduce using rule 2
	'||'           reduce using rule 2
	not            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	quot           reduce using rule 2
	rem            reduce using rule 2
	'<='           reduce using rule 2
	'>='           reduce using rule 2
	'\='           reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	var            reduce using rule 2
	%eof           reduce using rule 2


State 5

	AST -> int .                                        (rule 3)

	True           reduce using rule 3
	False          reduce using rule 3
	int            reduce using rule 3
	let            reduce using rule 3
	if             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	in             reduce using rule 3
	'=='           reduce using rule 3
	'&&'           reduce using rule 3
	'||'           reduce using rule 3
	not            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	quot           reduce using rule 3
	rem            reduce using rule 3
	'<='           reduce using rule 3
	'>='           reduce using rule 3
	'\='           reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	var            reduce using rule 3
	%eof           reduce using rule 3


State 6

	AST -> let . var '=' AST in AST                     (rule 4)

	var            shift, and enter state 17


State 7

	AST -> if . AST then AST else AST                   (rule 5)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 16

State 8

	AST -> not . AST                                    (rule 11)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 15

State 9

	AST -> '-' . int                                    (rule 17)

	int            shift, and enter state 14


State 10

	AST -> '(' . '\\' var '->' AST ')' '::' Type '->' Type    (rule 6)
	AST -> '(' . AST ')'                                (rule 23)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	'\\'           shift, and enter state 13
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 12

State 11

	AST -> var .                                        (rule 24)

	True           reduce using rule 24
	False          reduce using rule 24
	int            reduce using rule 24
	let            reduce using rule 24
	if             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	in             reduce using rule 24
	'=='           reduce using rule 24
	'&&'           reduce using rule 24
	'||'           reduce using rule 24
	not            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	quot           reduce using rule 24
	rem            reduce using rule 24
	'<='           reduce using rule 24
	'>='           reduce using rule 24
	'\='           reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	var            reduce using rule 24
	%eof           reduce using rule 24


State 12

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)
	AST -> '(' AST . ')'                                (rule 23)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	'=='           shift, and enter state 19
	'&&'           shift, and enter state 20
	'||'           shift, and enter state 21
	not            shift, and enter state 8
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	')'            shift, and enter state 49
	var            shift, and enter state 11

	AST            goto state 18

State 13

	AST -> '(' '\\' . var '->' AST ')' '::' Type '->' Type    (rule 6)

	var            shift, and enter state 48


State 14

	AST -> '-' int .                                    (rule 17)

	True           reduce using rule 17
	False          reduce using rule 17
	int            reduce using rule 17
	let            reduce using rule 17
	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	in             reduce using rule 17
	'=='           reduce using rule 17
	'&&'           reduce using rule 17
	'||'           reduce using rule 17
	not            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	quot           reduce using rule 17
	rem            reduce using rule 17
	'<='           reduce using rule 17
	'>='           reduce using rule 17
	'\='           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	var            reduce using rule 17
	%eof           reduce using rule 17


State 15

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> not AST .                                    (rule 11)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 11
	False          reduce using rule 11
	int            reduce using rule 11
	let            shift, and enter state 6
	if             shift, and enter state 7
	then           reduce using rule 11
	else           reduce using rule 11
	in             reduce using rule 11
	'=='           shift, and enter state 19
	'&&'           shift, and enter state 20
	'||'           shift, and enter state 21
	not            reduce using rule 11
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	')'            reduce using rule 11
	var            reduce using rule 11
	%eof           reduce using rule 11

	AST            goto state 18

State 16

	AST -> if AST . then AST else AST                   (rule 5)
	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	then           shift, and enter state 47
	'=='           shift, and enter state 19
	'&&'           shift, and enter state 20
	'||'           shift, and enter state 21
	not            shift, and enter state 8
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 18

State 17

	AST -> let var . '=' AST in AST                     (rule 4)

	'='            shift, and enter state 46


State 18

	AST -> AST . AST                                    (rule 7)
	AST -> AST AST .                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 7
	False          reduce using rule 7
	int            reduce using rule 7
	let            reduce using rule 7
	if             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	in             reduce using rule 7
	'=='           reduce using rule 7
	'&&'           reduce using rule 7
	'||'           reduce using rule 7
	not            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	quot           reduce using rule 7
	rem            reduce using rule 7
	'<='           reduce using rule 7
	'>='           reduce using rule 7
	'\='           reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	var            reduce using rule 7
	%eof           reduce using rule 7

	AST            goto state 18

State 19

	AST -> AST '==' . AST                               (rule 8)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 45

State 20

	AST -> AST '&&' . AST                               (rule 9)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 44

State 21

	AST -> AST '||' . AST                               (rule 10)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 43

State 22

	AST -> AST '+' . AST                                (rule 12)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 42

State 23

	AST -> AST '-' . AST                                (rule 13)
	AST -> '-' . int                                    (rule 17)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 41
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 40

State 24

	AST -> AST '*' . AST                                (rule 14)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 39

State 25

	AST -> AST quot . AST                               (rule 15)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 38

State 26

	AST -> AST rem . AST                                (rule 16)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 37

State 27

	AST -> AST '<=' . AST                               (rule 18)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 36

State 28

	AST -> AST '>=' . AST                               (rule 19)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 35

State 29

	AST -> AST '\=' . AST                               (rule 20)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 34

State 30

	AST -> AST '<' . AST                                (rule 21)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 33

State 31

	AST -> AST '>' . AST                                (rule 22)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 32

State 32

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)
	AST -> AST '>' AST .                                (rule 22)

	True           reduce using rule 22
	False          reduce using rule 22
	int            reduce using rule 22
	let            reduce using rule 22
	if             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	in             reduce using rule 22
	'=='           reduce using rule 22
	'&&'           reduce using rule 22
	'||'           reduce using rule 22
	not            reduce using rule 22
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           fail
	'>='           fail
	'\='           fail
	'<'            fail
	'>'            fail
	'('            shift, and enter state 10
	')'            reduce using rule 22
	var            reduce using rule 22
	%eof           reduce using rule 22

	AST            goto state 18

State 33

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST '<' AST .                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 21
	False          reduce using rule 21
	int            reduce using rule 21
	let            reduce using rule 21
	if             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	in             reduce using rule 21
	'=='           reduce using rule 21
	'&&'           reduce using rule 21
	'||'           reduce using rule 21
	not            reduce using rule 21
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           fail
	'>='           fail
	'\='           fail
	'<'            fail
	'>'            fail
	'('            shift, and enter state 10
	')'            reduce using rule 21
	var            reduce using rule 21
	%eof           reduce using rule 21

	AST            goto state 18

State 34

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST '\=' AST .                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 20
	False          reduce using rule 20
	int            reduce using rule 20
	let            reduce using rule 20
	if             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	in             reduce using rule 20
	'=='           reduce using rule 20
	'&&'           reduce using rule 20
	'||'           reduce using rule 20
	not            reduce using rule 20
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           fail
	'>='           fail
	'\='           fail
	'<'            fail
	'>'            fail
	'('            shift, and enter state 10
	')'            reduce using rule 20
	var            reduce using rule 20
	%eof           reduce using rule 20

	AST            goto state 18

State 35

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST '>=' AST .                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 19
	False          reduce using rule 19
	int            reduce using rule 19
	let            reduce using rule 19
	if             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	in             reduce using rule 19
	'=='           reduce using rule 19
	'&&'           reduce using rule 19
	'||'           reduce using rule 19
	not            reduce using rule 19
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           fail
	'>='           fail
	'\='           fail
	'<'            fail
	'>'            fail
	'('            shift, and enter state 10
	')'            reduce using rule 19
	var            reduce using rule 19
	%eof           reduce using rule 19

	AST            goto state 18

State 36

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST '<=' AST .                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 18
	False          reduce using rule 18
	int            reduce using rule 18
	let            reduce using rule 18
	if             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	in             reduce using rule 18
	'=='           reduce using rule 18
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	not            reduce using rule 18
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           fail
	'>='           fail
	'\='           fail
	'<'            fail
	'>'            fail
	'('            shift, and enter state 10
	')'            reduce using rule 18
	var            reduce using rule 18
	%eof           reduce using rule 18

	AST            goto state 18

State 37

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST rem AST .                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 16
	False          reduce using rule 16
	int            reduce using rule 16
	let            reduce using rule 16
	if             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	in             reduce using rule 16
	'=='           reduce using rule 16
	'&&'           reduce using rule 16
	'||'           reduce using rule 16
	not            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	quot           reduce using rule 16
	rem            reduce using rule 16
	'<='           reduce using rule 16
	'>='           reduce using rule 16
	'\='           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'('            shift, and enter state 10
	')'            reduce using rule 16
	var            reduce using rule 16
	%eof           reduce using rule 16

	AST            goto state 18

State 38

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST quot AST .                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 15
	False          reduce using rule 15
	int            reduce using rule 15
	let            reduce using rule 15
	if             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	in             reduce using rule 15
	'=='           reduce using rule 15
	'&&'           reduce using rule 15
	'||'           reduce using rule 15
	not            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	quot           reduce using rule 15
	rem            reduce using rule 15
	'<='           reduce using rule 15
	'>='           reduce using rule 15
	'\='           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	'('            shift, and enter state 10
	')'            reduce using rule 15
	var            reduce using rule 15
	%eof           reduce using rule 15

	AST            goto state 18

State 39

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST '*' AST .                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 14
	False          reduce using rule 14
	int            reduce using rule 14
	let            reduce using rule 14
	if             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	in             reduce using rule 14
	'=='           reduce using rule 14
	'&&'           reduce using rule 14
	'||'           reduce using rule 14
	not            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	quot           reduce using rule 14
	rem            reduce using rule 14
	'<='           reduce using rule 14
	'>='           reduce using rule 14
	'\='           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	'('            shift, and enter state 10
	')'            reduce using rule 14
	var            reduce using rule 14
	%eof           reduce using rule 14

	AST            goto state 18

State 40

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST '-' AST .                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 13
	False          reduce using rule 13
	int            reduce using rule 13
	let            reduce using rule 13
	if             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	in             reduce using rule 13
	'=='           reduce using rule 13
	'&&'           reduce using rule 13
	'||'           reduce using rule 13
	not            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           reduce using rule 13
	'>='           reduce using rule 13
	'\='           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	'('            shift, and enter state 10
	')'            reduce using rule 13
	var            reduce using rule 13
	%eof           reduce using rule 13

	AST            goto state 18

State 41

	AST -> int .                                        (rule 3)
	AST -> '-' int .                                    (rule 17)

	True           reduce using rule 17
	False          reduce using rule 17
	int            reduce using rule 17
	let            reduce using rule 17
	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	in             reduce using rule 17
	'=='           reduce using rule 17
	'&&'           reduce using rule 17
	'||'           reduce using rule 17
	not            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	quot           reduce using rule 17
	rem            reduce using rule 17
	'<='           reduce using rule 17
	'>='           reduce using rule 17
	'\='           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	var            reduce using rule 17
	%eof           reduce using rule 17


State 42

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST '+' AST .                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 12
	False          reduce using rule 12
	int            reduce using rule 12
	let            reduce using rule 12
	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	in             reduce using rule 12
	'=='           reduce using rule 12
	'&&'           reduce using rule 12
	'||'           reduce using rule 12
	not            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           reduce using rule 12
	'>='           reduce using rule 12
	'\='           reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	'('            shift, and enter state 10
	')'            reduce using rule 12
	var            reduce using rule 12
	%eof           reduce using rule 12

	AST            goto state 18

State 43

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST '||' AST .                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 10
	False          reduce using rule 10
	int            reduce using rule 10
	let            reduce using rule 10
	if             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	in             reduce using rule 10
	'=='           shift, and enter state 19
	'&&'           shift, and enter state 20
	'||'           reduce using rule 10
	not            reduce using rule 10
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	')'            reduce using rule 10
	var            reduce using rule 10
	%eof           reduce using rule 10

	AST            goto state 18

State 44

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST '&&' AST .                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 9
	False          reduce using rule 9
	int            reduce using rule 9
	let            reduce using rule 9
	if             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	in             reduce using rule 9
	'=='           shift, and enter state 19
	'&&'           reduce using rule 9
	'||'           reduce using rule 9
	not            reduce using rule 9
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	')'            reduce using rule 9
	var            reduce using rule 9
	%eof           reduce using rule 9

	AST            goto state 18

State 45

	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST '==' AST .                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 8
	False          reduce using rule 8
	int            reduce using rule 8
	let            reduce using rule 8
	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	in             reduce using rule 8
	'=='           reduce using rule 8
	'&&'           reduce using rule 8
	'||'           reduce using rule 8
	not            reduce using rule 8
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	')'            reduce using rule 8
	var            reduce using rule 8
	%eof           reduce using rule 8

	AST            goto state 18

State 46

	AST -> let var '=' . AST in AST                     (rule 4)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 52

State 47

	AST -> if AST then . AST else AST                   (rule 5)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 51

State 48

	AST -> '(' '\\' var . '->' AST ')' '::' Type '->' Type    (rule 6)

	'->'           shift, and enter state 50


State 49

	AST -> '(' AST ')' .                                (rule 23)

	True           reduce using rule 23
	False          reduce using rule 23
	int            reduce using rule 23
	let            reduce using rule 23
	if             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	in             reduce using rule 23
	'=='           reduce using rule 23
	'&&'           reduce using rule 23
	'||'           reduce using rule 23
	not            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	quot           reduce using rule 23
	rem            reduce using rule 23
	'<='           reduce using rule 23
	'>='           reduce using rule 23
	'\='           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	var            reduce using rule 23
	%eof           reduce using rule 23


State 50

	AST -> '(' '\\' var '->' . AST ')' '::' Type '->' Type    (rule 6)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 55

State 51

	AST -> if AST then AST . else AST                   (rule 5)
	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	else           shift, and enter state 54
	'=='           shift, and enter state 19
	'&&'           shift, and enter state 20
	'||'           shift, and enter state 21
	not            shift, and enter state 8
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 18

State 52

	AST -> let var '=' AST . in AST                     (rule 4)
	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	in             shift, and enter state 53
	'=='           shift, and enter state 19
	'&&'           shift, and enter state 20
	'||'           shift, and enter state 21
	not            shift, and enter state 8
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 18

State 53

	AST -> let var '=' AST in . AST                     (rule 4)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 58

State 54

	AST -> if AST then AST else . AST                   (rule 5)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	not            shift, and enter state 8
	'-'            shift, and enter state 9
	'('            shift, and enter state 10
	var            shift, and enter state 11

	AST            goto state 57

State 55

	AST -> '(' '\\' var '->' AST . ')' '::' Type '->' Type    (rule 6)
	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           shift, and enter state 2
	False          shift, and enter state 4
	int            shift, and enter state 5
	let            shift, and enter state 6
	if             shift, and enter state 7
	'=='           shift, and enter state 19
	'&&'           shift, and enter state 20
	'||'           shift, and enter state 21
	not            shift, and enter state 8
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	')'            shift, and enter state 56
	var            shift, and enter state 11

	AST            goto state 18

State 56

	AST -> '(' '\\' var '->' AST ')' . '::' Type '->' Type    (rule 6)

	'::'           shift, and enter state 59


State 57

	AST -> if AST then AST else AST .                   (rule 5)
	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 5
	False          reduce using rule 5
	int            reduce using rule 5
	let            reduce using rule 5
	if             shift, and enter state 7
	then           reduce using rule 5
	else           reduce using rule 5
	in             reduce using rule 5
	'=='           shift, and enter state 19
	'&&'           shift, and enter state 20
	'||'           shift, and enter state 21
	not            reduce using rule 5
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	')'            reduce using rule 5
	var            reduce using rule 5
	%eof           reduce using rule 5

	AST            goto state 18

State 58

	AST -> let var '=' AST in AST .                     (rule 4)
	AST -> AST . AST                                    (rule 7)
	AST -> AST . '==' AST                               (rule 8)
	AST -> AST . '&&' AST                               (rule 9)
	AST -> AST . '||' AST                               (rule 10)
	AST -> AST . '+' AST                                (rule 12)
	AST -> AST . '-' AST                                (rule 13)
	AST -> AST . '*' AST                                (rule 14)
	AST -> AST . quot AST                               (rule 15)
	AST -> AST . rem AST                                (rule 16)
	AST -> AST . '<=' AST                               (rule 18)
	AST -> AST . '>=' AST                               (rule 19)
	AST -> AST . '\=' AST                               (rule 20)
	AST -> AST . '<' AST                                (rule 21)
	AST -> AST . '>' AST                                (rule 22)

	True           reduce using rule 4
	False          reduce using rule 4
	int            reduce using rule 4
	let            shift, and enter state 6
	if             shift, and enter state 7
	then           reduce using rule 4
	else           reduce using rule 4
	in             reduce using rule 4
	'=='           shift, and enter state 19
	'&&'           shift, and enter state 20
	'||'           shift, and enter state 21
	not            reduce using rule 4
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	'*'            shift, and enter state 24
	quot           shift, and enter state 25
	rem            shift, and enter state 26
	'<='           shift, and enter state 27
	'>='           shift, and enter state 28
	'\='           shift, and enter state 29
	'<'            shift, and enter state 30
	'>'            shift, and enter state 31
	'('            shift, and enter state 10
	')'            reduce using rule 4
	var            reduce using rule 4
	%eof           reduce using rule 4

	AST            goto state 18

State 59

	AST -> '(' '\\' var '->' AST ')' '::' . Type '->' Type    (rule 6)

	Bool           shift, and enter state 61
	Int            shift, and enter state 62
	'('            shift, and enter state 63

	Type           goto state 60

State 60

	AST -> '(' '\\' var '->' AST ')' '::' Type . '->' Type    (rule 6)
	Type -> Type . '->' Type                            (rule 25)

	'->'           shift, and enter state 65


State 61

	Type -> Bool .                                      (rule 27)

	True           reduce using rule 27
	False          reduce using rule 27
	int            reduce using rule 27
	let            reduce using rule 27
	if             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	in             reduce using rule 27
	'->'           reduce using rule 27
	'=='           reduce using rule 27
	'&&'           reduce using rule 27
	'||'           reduce using rule 27
	not            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	quot           reduce using rule 27
	rem            reduce using rule 27
	'<='           reduce using rule 27
	'>='           reduce using rule 27
	'\='           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	var            reduce using rule 27
	%eof           reduce using rule 27


State 62

	Type -> Int .                                       (rule 28)

	True           reduce using rule 28
	False          reduce using rule 28
	int            reduce using rule 28
	let            reduce using rule 28
	if             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	in             reduce using rule 28
	'->'           reduce using rule 28
	'=='           reduce using rule 28
	'&&'           reduce using rule 28
	'||'           reduce using rule 28
	not            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	quot           reduce using rule 28
	rem            reduce using rule 28
	'<='           reduce using rule 28
	'>='           reduce using rule 28
	'\='           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	var            reduce using rule 28
	%eof           reduce using rule 28


State 63

	Type -> '(' . Type ')'                              (rule 26)

	Bool           shift, and enter state 61
	Int            shift, and enter state 62
	'('            shift, and enter state 63

	Type           goto state 64

State 64

	Type -> Type . '->' Type                            (rule 25)
	Type -> '(' Type . ')'                              (rule 26)

	'->'           shift, and enter state 67
	')'            shift, and enter state 68


State 65

	AST -> '(' '\\' var '->' AST ')' '::' Type '->' . Type    (rule 6)
	Type -> Type '->' . Type                            (rule 25)

	Bool           shift, and enter state 61
	Int            shift, and enter state 62
	'('            shift, and enter state 63

	Type           goto state 66

State 66

	AST -> '(' '\\' var '->' AST ')' '::' Type '->' Type .    (rule 6)
	Type -> Type . '->' Type                            (rule 25)
	Type -> Type '->' Type .                            (rule 25)

	True           reduce using rule 6
	False          reduce using rule 6
	int            reduce using rule 6
	let            reduce using rule 6
	if             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	in             reduce using rule 6
	'->'           reduce using rule 25
	'=='           reduce using rule 6
	'&&'           reduce using rule 6
	'||'           reduce using rule 6
	not            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	quot           reduce using rule 6
	rem            reduce using rule 6
	'<='           reduce using rule 6
	'>='           reduce using rule 6
	'\='           reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	var            reduce using rule 6
	%eof           reduce using rule 6


State 67

	Type -> Type '->' . Type                            (rule 25)

	Bool           shift, and enter state 61
	Int            shift, and enter state 62
	'('            shift, and enter state 63

	Type           goto state 69

State 68

	Type -> '(' Type ')' .                              (rule 26)

	True           reduce using rule 26
	False          reduce using rule 26
	int            reduce using rule 26
	let            reduce using rule 26
	if             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	in             reduce using rule 26
	'->'           reduce using rule 26
	'=='           reduce using rule 26
	'&&'           reduce using rule 26
	'||'           reduce using rule 26
	not            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	quot           reduce using rule 26
	rem            reduce using rule 26
	'<='           reduce using rule 26
	'>='           reduce using rule 26
	'\='           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	var            reduce using rule 26
	%eof           reduce using rule 26


State 69

	Type -> Type . '->' Type                            (rule 25)
	Type -> Type '->' Type .                            (rule 25)

	True           reduce using rule 25
	False          reduce using rule 25
	int            reduce using rule 25
	let            reduce using rule 25
	if             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	in             reduce using rule 25
	'->'           reduce using rule 25
	'=='           reduce using rule 25
	'&&'           reduce using rule 25
	'||'           reduce using rule 25
	not            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	quot           reduce using rule 25
	rem            reduce using rule 25
	'<='           reduce using rule 25
	'>='           reduce using rule 25
	'\='           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	var            reduce using rule 25
	%eof           reduce using rule 25


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 29
Number of terminals: 31
Number of non-terminals: 3
Number of states: 70
